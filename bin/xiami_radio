#!/usr/bin/env ruby
#coding=utf-8

require 'xiami_radio'
require 'io/console'
require 'daemons'

XiamiRadio.init

daemons_opts = {
  app_name: 'xiami_radio',
  dir_mode: :normal,
  dir: XiamiRadio::TMP_DIR,
  log_output: XiamiRadio.debug?,
  output_logfilename: '辛'
}

def send_next_signal(app)
  Process.kill :SIGUSR1, app.pid.pid
end

def send_which_signal(app)
  File.delete XiamiRadio.track_info_swap
  Process.kill :SIGUSR2, app.pid.pid
  sleep 0.1
  puts File.read XiamiRadio.track_info_swap
end

if ARGV[0] == '-s'
  case ARGV[1]
  when 'stop', 'status'
    Daemons.run_proc 'xiami_radio', daemons_opts.merge(ARGV: ARGV[1..-1])
  when 'next'
    Daemons.run_proc 'xiami_radio', daemons_opts.merge(ARGV: ['status'], show_status_callback: :send_next_signal)
  when 'name', 'which', 'what'
    Daemons.run_proc 'xiami_radio', daemons_opts.merge(ARGV: ['status'], show_status_callback: :send_which_signal)
  end
  exit
end

args = ARGV.select { |arg| /^[a-zA-Z]+=.+/ === arg }.inject({}) do |res, arg|
  k, v = arg.split("=")
  res.merge k.to_sym => v
end
original_argv = ARGV.dup
ARGV.clear

user = XiamiRadio::User.instance
unless user.login?
  email, pwd = args[:email].to_s, args[:pwd].to_s
  if email.empty? || pwd.to_s.empty?
    puts 'Plz keep empty if you don\'t want to login'
    print 'Email: '
    email = gets.chomp.to_s
    pwd = unless email.empty?
      print 'Password: '
      STDIN.noecho(&:gets).chomp
    end.to_s
  end
  user.login_by_email(email, pwd) unless email.to_s.empty? || pwd.to_s.empty?
end

if args[:type].to_s.empty? || args[:oid].to_s.empty?
  puts 'Which radio do you want to listen?'
  puts '1/Enter - 虾米猜       2 - 个人电台      3 - 其他'
  case gets.chomp[0]
  when '2'
    radio_type, radio_oid = user.login? ? [4, user.user_id] : [8, 0]
  when '3'
    print 'type: '
    radio_type = gets.chomp.to_i
    print 'oid: '
    radio_oid = gets.chomp.to_i
  else
    radio_type, radio_oid = 8, 0
  end
else
  radio_type, radio_oid = args[:type].to_i, args[:oid].to_i
end

if original_argv.include? '-d'
  if RUBY_PLATFORM.include?('x86_64-darwin') && ENV['OBJC_DISABLE_INITIALIZE_FORK_SAFETY'] != 'YES'
    puts "Plz setup OBJC_DISABLE_INITIALIZE_FORK_SAFETY firstly:"
    puts "  export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES"
    return
  end

  Daemons.run_proc 'xiami_radio', daemons_opts.merge(ARGV: ['start']) do
    XiamiRadio.init
    XiamiRadio::Player.play XiamiRadio::Radio.new(type: radio_type, oid: radio_oid)
  end
else
  XiamiRadio::Player.play XiamiRadio::Radio.new(type: radio_type, oid: radio_oid)
end
